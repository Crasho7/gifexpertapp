{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","img","key","GifExpertApp","props","ReactDOM","render","document","getElementById"],"mappings":"2MAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACVC,mBAAS,IADC,mBACvCC,EADuC,KAC3BC,EAD2B,KAgB9C,OACI,0BAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAE5CN,EAAc,OAMd,2BACIO,KAAK,OACLC,MAAOT,EACPU,SAlBc,SAACP,GAAD,OAAOF,EAAcE,EAAEQ,OAAOF,Y,uBCL/CG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAIAI,MAAMF,GAJN,cAIbG,EAJa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KAEFC,EAAOD,EAAKE,KAAI,YAA4B,IAAzBC,EAAwB,EAAxBA,GAAIC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OAChC,MAAO,CACHF,KACAC,QACAT,IAAG,OAAEU,QAAF,IAAEA,OAAF,EAAEA,EAAQC,iBAAiBX,QAXnB,kBAeZM,GAfY,4CAAH,sDCAPM,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IACjC,OACI,yBAAKa,UAAU,2CACX,yBAAKC,IAAKd,EAAKe,IAAKN,IACpB,2BAAIA,KCFHO,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EAEZd,mBAAS,CAC/BqB,KAAM,GACNY,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAetC,OAPAC,qBAAU,WACNvB,EAAQC,GAAUuB,MAAK,SAAAC,GAAI,OAAIH,EAAS,CACpCd,KAAMiB,EACNL,SAAS,SAEd,CAACnB,IAEGoB,EDZ2BK,CAAazB,GAAjCY,EAFuB,EAE7BL,KAAcY,EAFe,EAEfA,QAStB,OACI,oCACI,gCAAMnB,EAAN,KACCmB,EACG,uBAAGJ,UAAU,oCAAb,aAEA,yBAAKA,UAAU,+CAEPH,EAAOH,KAAI,SAACiB,GAAD,OACP,kBAAC,EAAD,eACIC,IAAKD,EAAIhB,IACLgB,UErBvBE,EAAe,SAAAC,GAAU,IAAD,EAEG3C,mBAAS,CAAC,gBAFb,mBAE1BQ,EAF0B,KAEdT,EAFc,KAMjC,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAE5B,6BACA,4BAEQS,EAAWe,KAAI,SAAAT,GAAQ,OACnB,kBAAC,EAAD,CACIA,SAAUA,EACV2B,IAAK3B,UChBjC8B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.57fa0780.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => setInputValue(e.target.value);\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 2) {\r\n            //como se tiene el valor de referencia se puede hacer un callback para no tener que pasar todo el objeto \r\n            setCategories(categories => [inputValue, ...categories]);\r\n\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n}","\r\n\r\nexport const getGifs = async (category) => {\r\n    //encodeURI permite convertir un string en url, cambiando los espacios por %20.. etc\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=rtn70YIXfJmPAkS5TM7jLZ5la7eg7UfJ`;\r\n\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(({ id, title, images }) => {\r\n        return {\r\n            id,\r\n            title,\r\n            url: images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn \">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data: images, loading } = useFetchGifs(category);\r\n\r\n    //  useEffect(() => {\r\n    //los helpers son funciones que hacen un trabajo en especifico que pueden recibir un argumento en especifico y retornan una informacion\r\n    //que no hacen falta que redibujen el state\r\n\r\n    //    getGifs(category).then(setImages)\r\n    //}, [category]);\r\n\r\n    return (\r\n        <>\r\n            <h3> {category} </h3>\r\n            {loading ?\r\n                <p className=\"animate__animated animate__flash\">Loadig...</p>\r\n                :\r\n                <div className=\"card-grid animate__animated animate__fadeIn\">\r\n                    {\r\n                        images.map((img) => (\r\n                            <GifGridItem\r\n                                key={img.id}\r\n                                {...img}\r\n                            />\r\n                        ))\r\n                    }\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n\r\n    useEffect(() => {\r\n        getGifs(category).then(imgs => setState({\r\n            data: imgs,\r\n            loading: false\r\n        }))\r\n    }, [category]);\r\n\r\n    return state;\r\n}","import React, { useState } from 'react'\r\n\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = props => {\r\n\r\n    const [categories, setCategories] = useState(['Bob Esponja']);\r\n\r\n    // const handleAdd = (evt) => setCategories([...categories, 'Dorohedoro']);\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n\r\n            <hr />\r\n            <ol>\r\n                { //solo recibe expresiones de js que retornen algo\r\n                    categories.map(category => (\r\n                        <GifGrid\r\n                            category={category}\r\n                            key={category}\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport { GifExpertApp } from './GifExpertApp';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}